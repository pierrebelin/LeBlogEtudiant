<?php

namespace Pierre\ConnaitresesaidesBundle\Repository;

/**
 * AdvantageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvantageRepository extends \Doctrine\ORM\EntityRepository
{
    public function findPossibleAdvantageCities($statut, $city, $age, $salary)
    {

        $parameters = array(
            'statut' => $statut,
            'city' => $city,
            'age' => $age,
            'salarymin' => $salary,
            'salarymax' => $salary
        );


        $qb = $this->createQueryBuilder('advantage')
            ->select('advantage.name, advantage.organism, advantage.amount, advantage.price, advantage.description, city.name AS location, advantage.link, advantage.logo')
            // Search for statut in entity Statut
            ->innerJoin('PierreConnaitresesaidesBundle:AdvantageStatut', 'astatut', 'WITH', 'astatut.advantageId = advantage.id')
            ->innerJoin('PierreConnaitresesaidesBundle:Statut', 'statut', 'WITH', 'astatut.statutId = statut.id')
            ->where('statut.name = :statut')
            // Search for city in entity City
            ->innerJoin('PierreConnaitresesaidesBundle:AdvantageCity', 'acity', 'WITH', 'acity.advantageId = advantage.id')
            ->innerJoin('PierreConnaitresesaidesBundle:City', 'city', 'WITH', 'city.id = acity.cityId')
            ->andWhere('city.name = :city')
            ->setParameters($parameters)
            //Search corresponding advantage in entity Advantage
            ->andWhere('advantage.agemax > :age')
            ->setParameter('age', $age)
            ->andWhere('advantage.agemin <= :age')
            ->setParameter('age', $age)
            ->andWhere('advantage.salaryminpermonth <= :salarymin')
            ->setParameter('salarymin', $salary)
            ->andWhere('advantage.salarymaxpermonth >= :salarymax')
            ->setParameter('salarymax', $salary)
            ->orderBy('advantage.name', 'ASC');

        return $qb->getQuery()
            ->getResult();
    }

    public function findPossibleAdvantageCountries($statut, $city, $age, $salary)
    {

        $parameters = array(
            'statut' => $statut,
            'city' => $city,
            'age' => $age,
            'salarymin' => $salary,
            'salarymax' => $salary
        );


        $qb = $this->createQueryBuilder('advantage')
            ->select('advantage.name, advantage.organism, advantage.amount, advantage.price, advantage.description, country.name AS location, advantage.link, advantage.logo')
            // Search for statut in entity Statut
            ->leftJoin('PierreConnaitresesaidesBundle:AdvantageStatut', 'astatut', 'WITH', 'astatut.advantageId = advantage.id')
            ->innerJoin('PierreConnaitresesaidesBundle:Statut', 'statut', 'WITH', 'astatut.statutId = statut.id')
            ->where('statut.name = :statut')
            // Search for city in entity City
            ->innerJoin('PierreConnaitresesaidesBundle:AdvantageCountry', 'acountry', 'WITH', 'acountry.advantageId = advantage.id')
            ->innerJoin('PierreConnaitresesaidesBundle:Region', 'region', 'WITH', 'region.countryId = acountry.countryId')
            ->innerJoin('PierreConnaitresesaidesBundle:Department', 'dep', 'WITH', 'dep.regionId = region.id')
            ->innerJoin('PierreConnaitresesaidesBundle:City', 'city', 'WITH', 'city.departmentId = dep.id')
            ->andWhere('city.name = :city')
            ->innerJoin('PierreConnaitresesaidesBundle:Country', 'country', 'WITH', 'acountry.countryId = country.id')
            ->setParameters($parameters)
            //Search corresponding advantage in entity Advantage
            ->andWhere('advantage.agemax > :age')
            ->setParameter('age', $age)
            ->andWhere('advantage.agemin <= :age')
            ->setParameter('age', $age)
            ->andWhere('advantage.salaryminpermonth <= :salarymin')
            ->setParameter('salarymin', $salary)
            ->andWhere('advantage.salarymaxpermonth >= :salarymax')
            ->setParameter('salarymax', $salary)
            ->orderBy('advantage.name', 'ASC');

        return $qb->getQuery()
            ->getResult();
    }

    public function findPossibleAdvantageRegions($statut, $city, $age, $salary)
    {

        $parameters = array(
            'statut' => $statut,
            'city' => $city,
            'age' => $age,
            'salarymin' => $salary,
            'salarymax' => $salary
        );


        $qb = $this->createQueryBuilder('advantage')
            ->select('advantage.name, advantage.organism, advantage.amount, advantage.price, advantage.description, region.name AS location, advantage.link, advantage.logo')
            // Search for statut in entity Statut
            ->leftJoin('PierreConnaitresesaidesBundle:AdvantageStatut', 'astatut', 'WITH', 'astatut.advantageId = advantage.id')
            ->innerJoin('PierreConnaitresesaidesBundle:Statut', 'statut', 'WITH', 'astatut.statutId = statut.id')
            ->where('statut.name = :statut')
            // Search for city in entity City
            ->innerJoin('PierreConnaitresesaidesBundle:AdvantageRegion', 'aregion', 'WITH', 'aregion.advantageId = advantage.id')
            ->innerJoin('PierreConnaitresesaidesBundle:Department', 'dep', 'WITH', 'dep.regionId = aregion.regionId')
            ->innerJoin('PierreConnaitresesaidesBundle:City', 'city', 'WITH', 'city.departmentId = dep.id')
            ->andWhere('city.name = :city')
            ->innerJoin('PierreConnaitresesaidesBundle:Region', 'region', 'WITH', 'region.id = aregion.regionId')
            ->setParameters($parameters)
            //Search corresponding advantage in entity Advantage
            ->andWhere('advantage.agemax > :age')
            ->setParameter('age', $age)
            ->andWhere('advantage.agemin <= :age')
            ->setParameter('age', $age)
            ->andWhere('advantage.salaryminpermonth <= :salarymin')
            ->setParameter('salarymin', $salary)
            ->andWhere('advantage.salarymaxpermonth >= :salarymax')
            ->setParameter('salarymax', $salary)
            ->orderBy('advantage.name', 'ASC');

        return $qb->getQuery()
            ->getResult();
    }

    public function findPossibleAdvantageDepartments($statut, $city, $age, $salary)
    {

        $parameters = array(
            'statut' => $statut,
            'city' => $city,
            'age' => $age,
            'salarymin' => $salary,
            'salarymax' => $salary
        );


        $qb = $this->createQueryBuilder('advantage')
            ->select('advantage.name, advantage.organism, advantage.amount, advantage.price, advantage.description, dep.name AS location, advantage.link, advantage.logo')
            // Search for statut in entity Statut
            ->leftJoin('PierreConnaitresesaidesBundle:AdvantageStatut', 'astatut', 'WITH', 'astatut.advantageId = advantage.id')
            ->innerJoin('PierreConnaitresesaidesBundle:Statut', 'statut', 'WITH', 'astatut.statutId = statut.id')
            ->where('statut.name = :statut')
            // Search for city in entity City
            ->innerJoin('PierreConnaitresesaidesBundle:AdvantageDepartment', 'adep', 'WITH', 'adep.advantageId = advantage.id')
            ->innerJoin('PierreConnaitresesaidesBundle:City', 'city', 'WITH', 'city.departmentId = adep.departmentId')
            ->andWhere('city.name = :city')
            ->innerJoin('PierreConnaitresesaidesBundle:Department', 'dep', 'WITH', 'dep.id = adep.departmentId')
            ->setParameters($parameters)
            //Search corresponding advantage in entity Advantage
            ->andWhere('advantage.agemax >= :age')
            ->setParameter('age', $age)
            ->andWhere('advantage.agemin <= :age')
            ->setParameter('age', $age)
            ->andWhere('advantage.salaryminpermonth <= :salarymin')
            ->setParameter('salarymin', $salary)
            ->andWhere('advantage.salarymaxpermonth >= :salarymax')
            ->setParameter('salarymax', $salary)
            ->orderBy('advantage.name', 'ASC');

        return $qb->getQuery()
            ->getResult();
    }
}
