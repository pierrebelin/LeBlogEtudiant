<?php

namespace Pierre\BonsPlansBundle\Repository;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BonsPlanRepository extends \Doctrine\ORM\EntityRepository
{

    public function getCountBonsPlans()
    {
        return $qb = $this->createQueryBuilder('b')
            ->select('COUNT(b)')
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getLatestUpdatedBonsPlans($page = 1, $limit = 10)
    {
        $qb = $this->createQueryBuilder('b')
            ->select('b ,c')
            ->leftJoin('b.comments', 'c')
            ->addOrderBy('b.updated', 'DESC');

        $qb->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit);

        return $qb->getQuery()
            ->getResult();

    }

    public function getLatestUpdatedBonsPlansCity($page = 1, $limit = 10, $city)
    {
        $qb = $this->createQueryBuilder('b')
            ->select('b ,c')
            ->leftJoin('b.comments', 'c')
            ->where('b.comments is null')
            ->addOrderBy('b.updated', 'DESC');

        $qb->setFirstResult(($page - 1) * $limit)
            ->setMaxResults($limit);

        return $qb->getQuery()
            ->getResult();

    }


    public function getLocalisation()
    {
        $bonsplanLocalisations = $this->createQueryBuilder('b')
            ->select('b.localisation')
            ->getQuery()
            ->getResult();

        $tags = array();
        foreach ($bonsplanLocalisations as $bonsplanLocalisation) {
            $tags = array_merge(explode(",", $bonsplanLocalisation['localisation']), $tags);
        }

        foreach ($tags as &$tag) {
            $tag = trim($tag);
        }

        return $tags;
    }

    public function getTagWeights($tags)
    {
        $tagWeights = array();
        if (empty($tags)) {
            return $tagWeights;
        }

        foreach ($tags as $tag) {
            $tagWeights[$tag] = (isset($tagWeights[$tag])) ? $tagWeights[$tag] + 1 : 1;
        }
        // Shuffle the tags
        uksort($tagWeights, function () {
            return rand() > rand();
        });

        $max = max($tagWeights);

        // Max of 5 weights
        $multiplier = ($max > 5) ? 5 / $max : 1;
        foreach ($tagWeights as &$tag) {
            $tag = ceil($tag * $multiplier);
        }

        return $tagWeights;
    }

}
